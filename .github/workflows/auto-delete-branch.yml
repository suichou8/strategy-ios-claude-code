name: Auto Delete Branch

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: read

jobs:
  delete-branch:
    runs-on: ubuntu-latest
    # 只在 PR 被合并后执行，不在单纯关闭时执行
    if: github.event.pull_request.merged == true

    steps:
      - name: Delete merged branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = context.payload.pull_request.head.ref;
            const headRepoOwner = context.payload.pull_request.head.repo?.owner?.login;

            // 检查是否是 fork 的 PR
            if (headRepoOwner && headRepoOwner !== owner) {
              console.log(`Skipping branch deletion: PR from fork (${headRepoOwner}/${branch})`);
              return;
            }

            // 检查是否是保护分支
            const protectedBranches = ['main', 'master', 'develop', 'staging', 'production'];
            if (protectedBranches.includes(branch)) {
              console.log(`Skipping deletion of protected branch: ${branch}`);
              return;
            }

            try {
              // 首先检查分支是否还存在
              let branchExists = false;
              try {
                await github.rest.git.getRef({
                  owner: owner,
                  repo: repo,
                  ref: `heads/${branch}`
                });
                branchExists = true;
              } catch (checkError) {
                if (checkError.status === 404) {
                  console.log(`✅ Branch ${branch} already deleted (possibly by GitHub auto-delete)`);

                  // 在 PR 中添加评论说明分支已被删除
                  await github.rest.issues.createComment({
                    owner: owner,
                    repo: repo,
                    issue_number: context.payload.pull_request.number,
                    body: `✅ Branch \`${branch}\` was automatically cleaned up after merge.`
                  });
                  return;
                } else {
                  throw checkError;
                }
              }

              if (branchExists) {
                // 分支存在，尝试删除
                await github.rest.git.deleteRef({
                  owner: owner,
                  repo: repo,
                  ref: `heads/${branch}`
                });

                console.log(`✅ Successfully deleted branch: ${branch}`);

                // 在 PR 中添加评论
                await github.rest.issues.createComment({
                  owner: owner,
                  repo: repo,
                  issue_number: context.payload.pull_request.number,
                  body: `🗑️ Branch \`${branch}\` has been automatically deleted after merge.`
                });
              }

            } catch (error) {
              console.error(`Failed to delete branch ${branch}:`, error.message);

              // 如果删除失败，根据错误类型处理
              if (error.status === 403) {
                await github.rest.issues.createComment({
                  owner: owner,
                  repo: repo,
                  issue_number: context.payload.pull_request.number,
                  body: `⚠️ Could not delete branch \`${branch}\` - insufficient permissions. You may need to delete it manually.`
                });
              } else if (error.status === 422) {
                console.log(`Branch ${branch} may be protected or invalid.`);
                await github.rest.issues.createComment({
                  owner: owner,
                  repo: repo,
                  issue_number: context.payload.pull_request.number,
                  body: `ℹ️ Branch \`${branch}\` could not be deleted (may be protected).`
                });
              } else if (error.status === 404) {
                console.log(`Branch ${branch} not found - may have been already deleted.`);
                await github.rest.issues.createComment({
                  owner: owner,
                  repo: repo,
                  issue_number: context.payload.pull_request.number,
                  body: `✅ Branch \`${branch}\` was already cleaned up.`
                });
              } else {
                // 其他未知错误
                await github.rest.issues.createComment({
                  owner: owner,
                  repo: repo,
                  issue_number: context.payload.pull_request.number,
                  body: `❌ Error occurred while cleaning up branch \`${branch}\`: ${error.message}`
                });
              }
            }

  # 处理 PR 被关闭但未合并的情况（可选）
  notify-closed:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == false

    steps:
      - name: Comment on closed PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.payload.pull_request.head.ref;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `ℹ️ This PR was closed without merging. Branch \`${branch}\` has been kept. \n\nIf you want to delete it manually, run:\n\`\`\`bash\ngit push origin --delete ${branch}\n\`\`\``
            });